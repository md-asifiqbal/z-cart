<?php
/**
 * Ptsv2paymentsPaymentInformationBankAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Incevio\Cybersource\CybersourceSDK
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Incevio\Cybersource\CybersourceSDK Merged Spec
 *
 * All Incevio\Cybersource\CybersourceSDK API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Incevio\Cybersource\CybersourceSDK\Model;

use \ArrayAccess;

/**
 * Ptsv2paymentsPaymentInformationBankAccount Class Doc Comment
 *
 * @category    Class
 * @package     Incevio\Cybersource\CybersourceSDK
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Ptsv2paymentsPaymentInformationBankAccount implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsv2payments_paymentInformation_bank_account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'number' => 'string',
        'encoderId' => 'string',
        'checkNumber' => 'string',
        'checkImageReferenceNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'number' => null,
        'encoderId' => null,
        'checkNumber' => null,
        'checkImageReferenceNumber' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'number' => 'number',
        'encoderId' => 'encoderId',
        'checkNumber' => 'checkNumber',
        'checkImageReferenceNumber' => 'checkImageReferenceNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'number' => 'setNumber',
        'encoderId' => 'setEncoderId',
        'checkNumber' => 'setCheckNumber',
        'checkImageReferenceNumber' => 'setCheckImageReferenceNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'number' => 'getNumber',
        'encoderId' => 'getEncoderId',
        'checkNumber' => 'getCheckNumber',
        'checkImageReferenceNumber' => 'getCheckImageReferenceNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['encoderId'] = isset($data['encoderId']) ? $data['encoderId'] : null;
        $this->container['checkNumber'] = isset($data['checkNumber']) ? $data['checkNumber'] : null;
        $this->container['checkImageReferenceNumber'] = isset($data['checkImageReferenceNumber']) ? $data['checkImageReferenceNumber'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['type']) && (strlen($this->container['type']) > 1)) {
            $invalid_properties[] = "invalid value for 'type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['number']) && (strlen($this->container['number']) > 17)) {
            $invalid_properties[] = "invalid value for 'number', the character length must be smaller than or equal to 17.";
        }

        if (!is_null($this->container['encoderId']) && (strlen($this->container['encoderId']) > 3)) {
            $invalid_properties[] = "invalid value for 'encoderId', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['checkNumber']) && (strlen($this->container['checkNumber']) > 8)) {
            $invalid_properties[] = "invalid value for 'checkNumber', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['checkImageReferenceNumber']) && (strlen($this->container['checkImageReferenceNumber']) > 32)) {
            $invalid_properties[] = "invalid value for 'checkImageReferenceNumber', the character length must be smaller than or equal to 32.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['type']) > 1) {
            return false;
        }
        if (strlen($this->container['number']) > 17) {
            return false;
        }
        if (strlen($this->container['encoderId']) > 3) {
            return false;
        }
        if (strlen($this->container['checkNumber']) > 8) {
            return false;
        }
        if (strlen($this->container['checkImageReferenceNumber']) > 32) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Account type.  Possible values:  - **C**: Checking.  - **G**: General ledger. This value is supported only on Wells Fargo ACH.  - **S**: Savings (U.S. dollars only).  - **X**: Corporate checking (U.S. dollars only).
     * @return $this
     */
    public function setType($type)
    {
        if (!is_null($type) && (strlen($type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $type when calling Ptsv2paymentsPaymentInformationBankAccount., must be smaller than or equal to 1.');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param string $number Account number.  When processing encoded account numbers, use this field for the encoded account number.
     * @return $this
     */
    public function setNumber($number)
    {
        if (!is_null($number) && (strlen($number) > 17)) {
            throw new \InvalidArgumentException('invalid length for $number when calling Ptsv2paymentsPaymentInformationBankAccount., must be smaller than or equal to 17.');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets encoderId
     * @return string
     */
    public function getEncoderId()
    {
        return $this->container['encoderId'];
    }

    /**
     * Sets encoderId
     * @param string $encoderId Identifier for the bank that provided the customerâ€™s encoded account number.  To obtain the bank identifier, contact your processor.  For details, see `account_encoder_id` request-level field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/)
     * @return $this
     */
    public function setEncoderId($encoderId)
    {
        if (!is_null($encoderId) && (strlen($encoderId) > 3)) {
            throw new \InvalidArgumentException('invalid length for $encoderId when calling Ptsv2paymentsPaymentInformationBankAccount., must be smaller than or equal to 3.');
        }

        $this->container['encoderId'] = $encoderId;

        return $this;
    }

    /**
     * Gets checkNumber
     * @return string
     */
    public function getCheckNumber()
    {
        return $this->container['checkNumber'];
    }

    /**
     * Sets checkNumber
     * @param string $checkNumber Check number.  Chase Paymentech Solutions - Optional. Incevio\Cybersource\CybersourceSDK ACH Service - Not used. RBS WorldPay Atlanta - Optional on debits. Required on credits. TeleCheck - Strongly recommended on debit requests. Optional on credits.
     * @return $this
     */
    public function setCheckNumber($checkNumber)
    {
        if (!is_null($checkNumber) && (strlen($checkNumber) > 8)) {
            throw new \InvalidArgumentException('invalid length for $checkNumber when calling Ptsv2paymentsPaymentInformationBankAccount., must be smaller than or equal to 8.');
        }

        $this->container['checkNumber'] = $checkNumber;

        return $this;
    }

    /**
     * Gets checkImageReferenceNumber
     * @return string
     */
    public function getCheckImageReferenceNumber()
    {
        return $this->container['checkImageReferenceNumber'];
    }

    /**
     * Sets checkImageReferenceNumber
     * @param string $checkImageReferenceNumber Image reference number associated with the check. You cannot include any special characters.
     * @return $this
     */
    public function setCheckImageReferenceNumber($checkImageReferenceNumber)
    {
        if (!is_null($checkImageReferenceNumber) && (strlen($checkImageReferenceNumber) > 32)) {
            throw new \InvalidArgumentException('invalid length for $checkImageReferenceNumber when calling Ptsv2paymentsPaymentInformationBankAccount., must be smaller than or equal to 32.');
        }

        $this->container['checkImageReferenceNumber'] = $checkImageReferenceNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this));
    }
}


