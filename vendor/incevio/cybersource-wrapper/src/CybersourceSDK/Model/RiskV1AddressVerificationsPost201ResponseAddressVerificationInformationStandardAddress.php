<?php
/**
 * RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Incevio\Cybersource\CybersourceSDK
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Incevio\Cybersource\CybersourceSDK Merged Spec
 *
 * All Incevio\Cybersource\CybersourceSDK API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Incevio\Cybersource\CybersourceSDK\Model;

use \ArrayAccess;

/**
 * RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress Class Doc Comment
 *
 * @category    Class
 * @package     Incevio\Cybersource\CybersourceSDK
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskV1AddressVerificationsPost201Response_addressVerificationInformation_standardAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address1' => '\Incevio\Cybersource\CybersourceSDK\Model\RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1',
        'address2' => 'string',
        'address3' => 'string',
        'address4' => 'string',
        'locality' => 'string',
        'county' => 'string',
        'country' => 'string',
        'csz' => 'string',
        'isoCountry' => 'string',
        'administrativeArea' => 'string',
        'postalCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'address4' => null,
        'locality' => null,
        'county' => null,
        'country' => null,
        'csz' => null,
        'isoCountry' => null,
        'administrativeArea' => null,
        'postalCode' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'address1' => 'address1',
        'address2' => 'address2',
        'address3' => 'address3',
        'address4' => 'address4',
        'locality' => 'locality',
        'county' => 'county',
        'country' => 'country',
        'csz' => 'csz',
        'isoCountry' => 'isoCountry',
        'administrativeArea' => 'administrativeArea',
        'postalCode' => 'postalCode'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'address4' => 'setAddress4',
        'locality' => 'setLocality',
        'county' => 'setCounty',
        'country' => 'setCountry',
        'csz' => 'setCsz',
        'isoCountry' => 'setIsoCountry',
        'administrativeArea' => 'setAdministrativeArea',
        'postalCode' => 'setPostalCode'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'address4' => 'getAddress4',
        'locality' => 'getLocality',
        'county' => 'getCounty',
        'country' => 'getCountry',
        'csz' => 'getCsz',
        'isoCountry' => 'getIsoCountry',
        'administrativeArea' => 'getAdministrativeArea',
        'postalCode' => 'getPostalCode'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['address4'] = isset($data['address4']) ? $data['address4'] : null;
        $this->container['locality'] = isset($data['locality']) ? $data['locality'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['csz'] = isset($data['csz']) ? $data['csz'] : null;
        $this->container['isoCountry'] = isset($data['isoCountry']) ? $data['isoCountry'] : null;
        $this->container['administrativeArea'] = isset($data['administrativeArea']) ? $data['administrativeArea'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['address2']) && (strlen($this->container['address2']) > 255)) {
            $invalid_properties[] = "invalid value for 'address2', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address3']) && (strlen($this->container['address3']) > 255)) {
            $invalid_properties[] = "invalid value for 'address3', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['address4']) && (strlen($this->container['address4']) > 255)) {
            $invalid_properties[] = "invalid value for 'address4', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['locality']) && (strlen($this->container['locality']) > 255)) {
            $invalid_properties[] = "invalid value for 'locality', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['county']) && (strlen($this->container['county']) > 255)) {
            $invalid_properties[] = "invalid value for 'county', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['country']) && (strlen($this->container['country']) > 255)) {
            $invalid_properties[] = "invalid value for 'country', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['csz']) && (strlen($this->container['csz']) > 255)) {
            $invalid_properties[] = "invalid value for 'csz', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['isoCountry']) && (strlen($this->container['isoCountry']) > 255)) {
            $invalid_properties[] = "invalid value for 'isoCountry', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['administrativeArea']) && (strlen($this->container['administrativeArea']) > 255)) {
            $invalid_properties[] = "invalid value for 'administrativeArea', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['postalCode']) && (strlen($this->container['postalCode']) > 255)) {
            $invalid_properties[] = "invalid value for 'postalCode', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['address2']) > 255) {
            return false;
        }
        if (strlen($this->container['address3']) > 255) {
            return false;
        }
        if (strlen($this->container['address4']) > 255) {
            return false;
        }
        if (strlen($this->container['locality']) > 255) {
            return false;
        }
        if (strlen($this->container['county']) > 255) {
            return false;
        }
        if (strlen($this->container['country']) > 255) {
            return false;
        }
        if (strlen($this->container['csz']) > 255) {
            return false;
        }
        if (strlen($this->container['isoCountry']) > 255) {
            return false;
        }
        if (strlen($this->container['administrativeArea']) > 255) {
            return false;
        }
        if (strlen($this->container['postalCode']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets address1
     * @return \Incevio\Cybersource\CybersourceSDK\Model\RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     * @param \Incevio\Cybersource\CybersourceSDK\Model\RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddressAddress1 $address1
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     * @param string $address2 Second line of the standardized address.
     * @return $this
     */
    public function setAddress2($address2)
    {
        if (!is_null($address2) && (strlen($address2) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address2 when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     * @param string $address3 Third line of the standardized address.
     * @return $this
     */
    public function setAddress3($address3)
    {
        if (!is_null($address3) && (strlen($address3) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address3 when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets address4
     * @return string
     */
    public function getAddress4()
    {
        return $this->container['address4'];
    }

    /**
     * Sets address4
     * @param string $address4 Fourth line of the standardized address.
     * @return $this
     */
    public function setAddress4($address4)
    {
        if (!is_null($address4) && (strlen($address4) > 255)) {
            throw new \InvalidArgumentException('invalid length for $address4 when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['address4'] = $address4;

        return $this;
    }

    /**
     * Gets locality
     * @return string
     */
    public function getLocality()
    {
        return $this->container['locality'];
    }

    /**
     * Sets locality
     * @param string $locality Standardized city name.
     * @return $this
     */
    public function setLocality($locality)
    {
        if (!is_null($locality) && (strlen($locality) > 255)) {
            throw new \InvalidArgumentException('invalid length for $locality when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['locality'] = $locality;

        return $this;
    }

    /**
     * Gets county
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     * @param string $county U.S. county if available.
     * @return $this
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (strlen($county) > 255)) {
            throw new \InvalidArgumentException('invalid length for $county when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param string $country Standardized country name.
     * @return $this
     */
    public function setCountry($country)
    {
        if (!is_null($country) && (strlen($country) > 255)) {
            throw new \InvalidArgumentException('invalid length for $country when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets csz
     * @return string
     */
    public function getCsz()
    {
        return $this->container['csz'];
    }

    /**
     * Sets csz
     * @param string $csz Standardized city, state or province, and ZIP +4 code or postal code line.
     * @return $this
     */
    public function setCsz($csz)
    {
        if (!is_null($csz) && (strlen($csz) > 255)) {
            throw new \InvalidArgumentException('invalid length for $csz when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['csz'] = $csz;

        return $this;
    }

    /**
     * Gets isoCountry
     * @return string
     */
    public function getIsoCountry()
    {
        return $this->container['isoCountry'];
    }

    /**
     * Sets isoCountry
     * @param string $isoCountry Standardized two-character ISO country code.
     * @return $this
     */
    public function setIsoCountry($isoCountry)
    {
        if (!is_null($isoCountry) && (strlen($isoCountry) > 255)) {
            throw new \InvalidArgumentException('invalid length for $isoCountry when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['isoCountry'] = $isoCountry;

        return $this;
    }

    /**
     * Gets administrativeArea
     * @return string
     */
    public function getAdministrativeArea()
    {
        return $this->container['administrativeArea'];
    }

    /**
     * Sets administrativeArea
     * @param string $administrativeArea U.S.P.S. standardized state or province abbreviation.
     * @return $this
     */
    public function setAdministrativeArea($administrativeArea)
    {
        if (!is_null($administrativeArea) && (strlen($administrativeArea) > 255)) {
            throw new \InvalidArgumentException('invalid length for $administrativeArea when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['administrativeArea'] = $administrativeArea;

        return $this;
    }

    /**
     * Gets postalCode
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     * @param string $postalCode Standardized U.S. ZIP + 4 postal code.
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        if (!is_null($postalCode) && (strlen($postalCode) > 255)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling RiskV1AddressVerificationsPost201ResponseAddressVerificationInformationStandardAddress., must be smaller than or equal to 255.');
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this));
    }
}


