<?php
/**
 * RiskV1DecisionsPost201ResponsePaymentInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Incevio\Cybersource\CybersourceSDK
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Incevio\Cybersource\CybersourceSDK Merged Spec
 *
 * All Incevio\Cybersource\CybersourceSDK API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Incevio\Cybersource\CybersourceSDK\Model;

use \ArrayAccess;

/**
 * RiskV1DecisionsPost201ResponsePaymentInformation Class Doc Comment
 *
 * @category    Class
 * @description Contains response information about the payment.
 * @package     Incevio\Cybersource\CybersourceSDK
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RiskV1DecisionsPost201ResponsePaymentInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'riskV1DecisionsPost201Response_paymentInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'binCountry' => 'string',
        'accountType' => 'string',
        'issuer' => 'string',
        'scheme' => 'string',
        'bin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'binCountry' => null,
        'accountType' => null,
        'issuer' => null,
        'scheme' => null,
        'bin' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'binCountry' => 'binCountry',
        'accountType' => 'accountType',
        'issuer' => 'issuer',
        'scheme' => 'scheme',
        'bin' => 'bin'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'binCountry' => 'setBinCountry',
        'accountType' => 'setAccountType',
        'issuer' => 'setIssuer',
        'scheme' => 'setScheme',
        'bin' => 'setBin'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'binCountry' => 'getBinCountry',
        'accountType' => 'getAccountType',
        'issuer' => 'getIssuer',
        'scheme' => 'getScheme',
        'bin' => 'getBin'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['binCountry'] = isset($data['binCountry']) ? $data['binCountry'] : null;
        $this->container['accountType'] = isset($data['accountType']) ? $data['accountType'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['scheme'] = isset($data['scheme']) ? $data['scheme'] : null;
        $this->container['bin'] = isset($data['bin']) ? $data['bin'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['binCountry']) && (strlen($this->container['binCountry']) > 255)) {
            $invalid_properties[] = "invalid value for 'binCountry', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['accountType']) && (strlen($this->container['accountType']) > 255)) {
            $invalid_properties[] = "invalid value for 'accountType', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['issuer']) && (strlen($this->container['issuer']) > 255)) {
            $invalid_properties[] = "invalid value for 'issuer', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['scheme']) && (strlen($this->container['scheme']) > 255)) {
            $invalid_properties[] = "invalid value for 'scheme', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bin']) && (strlen($this->container['bin']) > 255)) {
            $invalid_properties[] = "invalid value for 'bin', the character length must be smaller than or equal to 255.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['binCountry']) > 255) {
            return false;
        }
        if (strlen($this->container['accountType']) > 255) {
            return false;
        }
        if (strlen($this->container['issuer']) > 255) {
            return false;
        }
        if (strlen($this->container['scheme']) > 255) {
            return false;
        }
        if (strlen($this->container['bin']) > 255) {
            return false;
        }
        return true;
    }


    /**
     * Gets binCountry
     * @return string
     */
    public function getBinCountry()
    {
        return $this->container['binCountry'];
    }

    /**
     * Sets binCountry
     * @param string $binCountry Country (two-digit country code) associated with the BIN of the customerâ€™s card used for the payment. Returned if the information is available. Use this field for additional information when reviewing orders. This information is also displayed in the details page of the Incevio\Cybersource\CybersourceSDK Business Center.  For all possible values, see the `bin_country` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [Incevio\Cybersource\CybersourceSDK Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     * @return $this
     */
    public function setBinCountry($binCountry)
    {
        if (!is_null($binCountry) && (strlen($binCountry) > 255)) {
            throw new \InvalidArgumentException('invalid length for $binCountry when calling RiskV1DecisionsPost201ResponsePaymentInformation., must be smaller than or equal to 255.');
        }

        $this->container['binCountry'] = $binCountry;

        return $this;
    }

    /**
     * Gets accountType
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['accountType'];
    }

    /**
     * Sets accountType
     * @param string $accountType Type of payment card account. This field can refer to a credit card, debit card, or prepaid card account type.  For all possible values, see the `score_card_account_type` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [Incevio\Cybersource\CybersourceSDK Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     * @return $this
     */
    public function setAccountType($accountType)
    {
        if (!is_null($accountType) && (strlen($accountType) > 255)) {
            throw new \InvalidArgumentException('invalid length for $accountType when calling RiskV1DecisionsPost201ResponsePaymentInformation., must be smaller than or equal to 255.');
        }

        $this->container['accountType'] = $accountType;

        return $this;
    }

    /**
     * Gets issuer
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     * @param string $issuer Name of the bank or entity that issued the card account.  For all possible values, see the `score_card_issuer` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [Incevio\Cybersource\CybersourceSDK Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     * @return $this
     */
    public function setIssuer($issuer)
    {
        if (!is_null($issuer) && (strlen($issuer) > 255)) {
            throw new \InvalidArgumentException('invalid length for $issuer when calling RiskV1DecisionsPost201ResponsePaymentInformation., must be smaller than or equal to 255.');
        }

        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets scheme
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     * @param string $scheme Subtype of card account. This field can contain one of the following values: - Maestro International - Maestro UK Domestic - MasterCard Credit - MasterCard Debit - Visa Credit - Visa Debit - Visa Electron  **Note** Additional values may be present.  For all possible values, see the `score_card_scheme` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [Incevio\Cybersource\CybersourceSDK Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     * @return $this
     */
    public function setScheme($scheme)
    {
        if (!is_null($scheme) && (strlen($scheme) > 255)) {
            throw new \InvalidArgumentException('invalid length for $scheme when calling RiskV1DecisionsPost201ResponsePaymentInformation., must be smaller than or equal to 255.');
        }

        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets bin
     * @return string
     */
    public function getBin()
    {
        return $this->container['bin'];
    }

    /**
     * Sets bin
     * @param string $bin Credit card BIN (the first six digits of the credit card).Derived either from the `cc_bin` request field or from the first six characters of the `customer_cc_num` field.  For all possible values, see the `score_cc_bin` field description in the _Decision Manager Using the SCMP API Developer Guide_ on the [Incevio\Cybersource\CybersourceSDK Business Center.](https://ebc2.cybersource.com/ebc2/) Click **Decision Manager** > **Documentation** > **Guides** > _Decision Manager Using the SCMP API Developer Guide_ (PDF link).
     * @return $this
     */
    public function setBin($bin)
    {
        if (!is_null($bin) && (strlen($bin) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bin when calling RiskV1DecisionsPost201ResponsePaymentInformation., must be smaller than or equal to 255.');
        }

        $this->container['bin'] = $bin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this));
    }
}


