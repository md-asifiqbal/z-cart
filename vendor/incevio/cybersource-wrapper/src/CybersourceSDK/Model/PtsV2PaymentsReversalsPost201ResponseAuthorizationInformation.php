<?php
/**
 * PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Incevio\Cybersource\CybersourceSDK
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Incevio\Cybersource\CybersourceSDK Merged Spec
 *
 * All Incevio\Cybersource\CybersourceSDK API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Incevio\Cybersource\CybersourceSDK\Model;

use \ArrayAccess;

/**
 * PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation Class Doc Comment
 *
 * @category    Class
 * @package     Incevio\Cybersource\CybersourceSDK
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ptsV2PaymentsReversalsPost201Response_authorizationInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approvalCode' => 'string',
        'reasonCode' => 'string',
        'reversalSubmitted' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'approvalCode' => null,
        'reasonCode' => null,
        'reversalSubmitted' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'approvalCode' => 'approvalCode',
        'reasonCode' => 'reasonCode',
        'reversalSubmitted' => 'reversalSubmitted'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'approvalCode' => 'setApprovalCode',
        'reasonCode' => 'setReasonCode',
        'reversalSubmitted' => 'setReversalSubmitted'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'approvalCode' => 'getApprovalCode',
        'reasonCode' => 'getReasonCode',
        'reversalSubmitted' => 'getReversalSubmitted'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }





    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approvalCode'] = isset($data['approvalCode']) ? $data['approvalCode'] : null;
        $this->container['reasonCode'] = isset($data['reasonCode']) ? $data['reasonCode'] : null;
        $this->container['reversalSubmitted'] = isset($data['reversalSubmitted']) ? $data['reversalSubmitted'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['approvalCode']) && (strlen($this->container['approvalCode']) > 6)) {
            $invalid_properties[] = "invalid value for 'approvalCode', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['reasonCode']) && (strlen($this->container['reasonCode']) > 50)) {
            $invalid_properties[] = "invalid value for 'reasonCode', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reversalSubmitted']) && (strlen($this->container['reversalSubmitted']) > 1)) {
            $invalid_properties[] = "invalid value for 'reversalSubmitted', the character length must be smaller than or equal to 1.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['approvalCode']) > 6) {
            return false;
        }
        if (strlen($this->container['reasonCode']) > 50) {
            return false;
        }
        if (strlen($this->container['reversalSubmitted']) > 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets approvalCode
     * @return string
     */
    public function getApprovalCode()
    {
        return $this->container['approvalCode'];
    }

    /**
     * Sets approvalCode
     * @param string $approvalCode The authorization code returned by the processor.
     * @return $this
     */
    public function setApprovalCode($approvalCode)
    {
        if (!is_null($approvalCode) && (strlen($approvalCode) > 6)) {
            throw new \InvalidArgumentException('invalid length for $approvalCode when calling PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation., must be smaller than or equal to 6.');
        }

        $this->container['approvalCode'] = $approvalCode;

        return $this;
    }

    /**
     * Gets reasonCode
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reasonCode'];
    }

    /**
     * Sets reasonCode
     * @param string $reasonCode Reply flag for the original transaction.
     * @return $this
     */
    public function setReasonCode($reasonCode)
    {
        if (!is_null($reasonCode) && (strlen($reasonCode) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reasonCode when calling PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation., must be smaller than or equal to 50.');
        }

        $this->container['reasonCode'] = $reasonCode;

        return $this;
    }

    /**
     * Gets reversalSubmitted
     * @return string
     */
    public function getReversalSubmitted()
    {
        return $this->container['reversalSubmitted'];
    }

    /**
     * Sets reversalSubmitted
     * @param string $reversalSubmitted Flag indicating whether a full authorization reversal was successfully submitted.  Possible values: - Y: The authorization reversal was successfully submitted. - N: The authorization reversal was not successfully submitted. You must send a credit request for a refund.  This field is supported only for **FDC Nashville Global**.
     * @return $this
     */
    public function setReversalSubmitted($reversalSubmitted)
    {
        if (!is_null($reversalSubmitted) && (strlen($reversalSubmitted) > 1)) {
            throw new \InvalidArgumentException('invalid length for $reversalSubmitted when calling PtsV2PaymentsReversalsPost201ResponseAuthorizationInformation., must be smaller than or equal to 1.');
        }

        $this->container['reversalSubmitted'] = $reversalSubmitted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Incevio\Cybersource\CybersourceSDK\ObjectSerializer::sanitizeForSerialization($this));
    }
}


